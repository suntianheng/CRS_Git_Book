{"./":{"url":"./","title":"前言","summary":"V -0.01","keywords":"","body":"版本 介绍 README为说明文档,SUMMARY为章节目录,一般不需要修改. 记录问题使用下面格式: Tikcet *此处填写ticket号(没有不填) 问题描述 中庚集团的318,档案绑定了联系人,上行报错，Failed insert relation in CRS,pms_id is not in cust_contact，手动推送联系人的profile，也报错：Failed update cust_contact in CRS,f_account is not in cust_info 具体原因和解决方案 原因是此时程序中单独上行档案允许,单独上行联系人不允许,档案+联系人也不允许(应该是允许的),当上行档案+联系人时会先去查询pms_id,此时上行的消息体数据并未存储到数据库中,查不到相关信息就会报出此问题,需要修改程序代码取用消息体中的数据. 编写人 carl.sun 时间 2020/9/3 GitBook 命令 这里将介绍GitBook的一些命令 输出gitbook的帮助信息 gitbook --help 生成静态网页并运行服务器 gitbook serve 生成静态网页 gitbook build 生成静态网页时指定gitbook的版本，如果本地没有将先下载 gitbook build --gitbook=3.2.3 列出所有的gitbook版本 gitbook ls 列出远程可用的gitbook版本 gitbook ls-remote 更新到gitbook的最新版本 gitbook update 卸载对应的gitbook版本 gitbook uninstall 3.2.3 安装依赖 gitbook install 指定log的级别 gitbook build --log=debug 输出错误信息 gitbook builid --debug powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_CRO/":{"url":"Kunlun_CRO/","title":"Kunlun_CRO","keywords":"","body":"Kunlun_CRO powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_CCM/":{"url":"Kunlun_CCM/","title":"Kunlun_CCM","keywords":"","body":"Kunlun_CCM powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_KEH/":{"url":"Kunlun_KEH/","title":"Kunlun_KEH","keywords":"","body":"Kunlun_KEH powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_KEH/Customer/Customer.html":{"url":"Kunlun_KEH/Customer/Customer.html","title":"档案","keywords":"","body":"档案 powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_KEH/Block/Block.html":{"url":"Kunlun_KEH/Block/Block.html","title":"团队预定","keywords":"","body":"团队预定 powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_KEH/Contract/Contract.html":{"url":"Kunlun_KEH/Contract/Contract.html","title":"合同","keywords":"","body":"合同 Tikcet #22121 #22127 问题描述 集团端下发合同协议价,集团删除后酒店端仍然存在 具体原因和解决方案 1.创建一个合同,并选择A酒店的协议价下发给A酒店,删除A酒店的协议价并下发,酒店端跟着删除2.创建一个合同,并选择A,B酒店的协议价下发给A,B酒店,删除A酒店的协议价并下发,去A酒店端查看该协议价仍存在解决方式 : 程序中是根据档案查询该酒店的合同,并查询合同下所有的协议价,然后对比筛选出集团端删除掉的协议价,再从酒店端删除该协议价,这个逻辑的语句条件不完整,所以会出现此问题,补充条件后解决. 编写人 carl.sun 时间 2020/9/16 powered by Gitbook该文件修订时间： 2020-09-16 17:10:01 "},"Kunlun_KEH/Contact/Contact.html":{"url":"Kunlun_KEH/Contact/Contact.html","title":"联系人","keywords":"","body":"联系人 Tikcet 问题描述 如果销售员显示错误,当前酒店的CSM中检查默认销售员的部门是否与当前登录用户的部门是否一致 具体原因和解决方案 KEH档案新建、编辑页面显示的部门和销售员规则: 1.先查询默认销售员的depcode和salescode. 2.查询当前登录的用户拥有的用户级别(总经理=所有客户,部门经理=部门客户,普通操作员=自己客户),以及当前酒店下的所能查看的部门. 3.查询当前登录的用户拥有的用户级别,部门级别,以及当前酒店下的所能查看的销售员. 4.通过默认销售员的depcode,当前登录的用户拥有的用户级别,部门级别,以及当前酒店下的所能查看的销售员.最后显示第2步结果的部门和第4步结果的销售员. 编写人 carl.sun 时间 2020/9/9 powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_KEH/KEH_API/KEH_API.html":{"url":"Kunlun_KEH/KEH_API/KEH_API.html","title":"KEH_API","keywords":"","body":"KEH_API powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_KXI/":{"url":"Kunlun_KXI/","title":"Kunlun_KXI","keywords":"","body":"Kunlun_KXI powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_KXI/KXI/KXI.html":{"url":"Kunlun_KXI/KXI/KXI.html","title":"KXI","keywords":"","body":"KXI powered by Gitbook该文件修订时间： 2020-09-27 09:32:09 "},"Kunlun_KXI/OXI/OXI.html":{"url":"Kunlun_KXI/OXI/OXI.html","title":"OXI","keywords":"","body":"OXI AllotmentHelper 1.KXI上行allotment消息具体过程: 一.首先通过 HotelValidate 校验 需要酒店code,消息类型,接口类型 二.判断是否为多房价: 如果为多房价单独存储 parRateCodeList 集合 AllotmentRateCodes 节点下包含 AllotmentRateCodeCollection 节点各个房价 三.通过 owner 节点和 hotelcode 节点查询销售员: code如果不存在取默认值 ,如果没有owner节点仍取默认值. 四.处理档案: AssociatedProfiles 节点下包含 ProfileCollection 节点各个档案信息 通过 ProfileType 节点筛选档案类型 通过 mfResortProfileID 节点前台编号 ,查询并判断档案是否存在 , 不存在就insert *insert档案时需要获取 ProfileCollection 节点所有数据,酒店code,上行所有节点数据 五.档案中包含关联关系: 如果 Relationships 节点中有数据,则获取 Relationship 节点中 Relations节点下 Relation 节点各个关联关系 在dic_relationships表中写入关联关系 六.检查锁房数据: 检查 InventoryBlocks 节点下 InventoryBlockCollection 节点各个锁房数据是否开启 Elastic 弹性锁房 Elastic默认为 0 七.获取团队预定id: 通过前台编号,酒店code,mfAllotmentId(此为团队预定id) 查询block_id. 八.检查宴会状态: 检查 Catering 节点中的 StatusCode 节点状态代码是否存在, 如果不存在判断是否配置了转换,如果没配置转换就取默认值. 九.检查渠道: 检查 mfBlockOriginatorCode 节点渠道代码是否存在,如果不存在判断是否配置了转换,如果没配置转换就取默认值. 十.检查市场: 检查 mfMarketCode 节点市场代码是否存在,如果不存在判断是否配置了转换,如果没配置转换就取默认值. 十一.检查多房价: 检查 RatePlanCodes 节点单房价或多房价 parRateCodeList 集合中代码是否存在,如果不存在判断是否配置了转换,如果没配置转换就取默认值. 十二.检查付款方式: PaymentMethod 节点 , 其他同上 十三.检查来源: mfSourceCode 节点 , 其他同上 十四.检查预定状态: mfBookingStatus 节点 , 其他同上 十五.检查取消原因: CancelCode 节点 , 其他同上 十六.检查预定类型: mfReservationType 节点 , 其他同上 十七.判断主档案: 通过市场代码,来源代码,销售员代码,房价代码,酒店code查询所有档案id, 通过档案id获取主档案的档案类型 十八.insert或update团队预定并添加修改日志: 判断block_id是否存在,insert或update团队预定 , update团队预定会添加修改日志. 十九.返回result消息: 判断block_id是否存在,生成消息体包含,团队预定id,团队预定pmsid,档案id,档案pmsid(程序会+1). 二十.检查IMP_BLOCK_CONTACT系统参数判断是否处理联系人: 如果 Relationships 节点中有数据,则获取 Relationship 节点中 Relations节点下 Relation 节点各个关联关系 如果存在联系人关联关系,先删除block_cust_contact_relaction_info表中数据再新增联系人关联关系,否则直接增加 二十一.处理锁房数据: 获取 InventoryBlocks 节点下 InventoryBlockCollection 节点各个锁房数据 先delete后insert 二十二.处理备注信息: 获取 AllotmentNotes 节点下 AllotmentNoteCollection 节点各个备注信息 检查 AllotmentNoteCollection 节点中的 NoteType是否存在,如果不存在判断是否配置了转换,如果没配置转换就取默认值. 二十三.最后处理完毕 powered by Gitbook该文件修订时间： 2020-09-27 09:33:23 "},"Kunlun_KWS/":{"url":"Kunlun_KWS/","title":"Kunlun_KWS","keywords":"","body":"Kunlun_KWS powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_RMS/":{"url":"Kunlun_RMS/","title":"Kunlun_RMS","keywords":"","body":"Kunlun_RMS powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_LPS/":{"url":"Kunlun_LPS/","title":"Kunlun_LPS","keywords":"","body":"Kunlun_LPS powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Kunlun_CSM/":{"url":"Kunlun_CSM/","title":"Kunlun_CSM","keywords":"","body":"Kunlun_CSM powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "},"Other/":{"url":"Other/","title":"Other","keywords":"","body":"Other powered by Gitbook该文件修订时间： 2020-09-10 18:53:35 "}}